{"version":3,"file":"index.js","sources":["../../src/node/getComponentsFromDir.ts","../../src/node/prepareClientConfigFile.ts","../../src/node/registerComponentsPlugin.ts"],"sourcesContent":["import { globby, path } from 'vuepress/utils'\nimport type { RegisterComponentsPluginOptions } from './registerComponentsPlugin.js'\n\nexport const getComponentsFromDir = async ({\n  componentsDir,\n  componentsPatterns,\n  getComponentName,\n}: Omit<Required<RegisterComponentsPluginOptions>, 'components'>): Promise<\n  Record<string, string>\n> => {\n  if (!componentsDir) {\n    return {}\n  }\n\n  // get all matched component files\n  const componentsDirFiles = await globby(componentsPatterns, {\n    cwd: componentsDir,\n  })\n\n  // transform files to name => filepath map\n  return Object.fromEntries(\n    componentsDirFiles.map((filename) => [\n      getComponentName(filename),\n      path.resolve(componentsDir, filename),\n    ]),\n  )\n}\n","import type { App } from 'vuepress/core'\nimport { getComponentsFromDir } from './getComponentsFromDir.js'\nimport type { RegisterComponentsPluginOptions } from './registerComponentsPlugin.js'\n\nexport const prepareClientConfigFile = async (\n  app: App,\n  options: Required<RegisterComponentsPluginOptions>,\n  identifier: string,\n): Promise<string> => {\n  // get components from directory\n  const componentsFromDir = await getComponentsFromDir(options)\n\n  // components from options will override components from dir\n  // if they have the same component name\n  const componentsMap: Record<string, string> = {\n    ...componentsFromDir,\n    ...options.components,\n  }\n\n  // client app enhance file content\n  const content = `\\\nimport { defineAsyncComponent } from 'vue'\n\nexport default {\n  enhance: ({ app }) => {\\\n    ${Object.entries(componentsMap)\n      .map(\n        ([name, filepath]) => `\n      app.component(${JSON.stringify(\n        name,\n      )}, defineAsyncComponent(() => import(${JSON.stringify(filepath)})))`,\n      )\n      .join('\\n    ')}\n  },\n}\n`\n\n  // write temp file and return the file path\n  return app.writeTemp(\n    `register-components/clientConfig.${identifier}.js`,\n    content,\n  )\n}\n","import { watch } from 'chokidar'\nimport type { Plugin } from 'vuepress/core'\nimport { hash, path } from 'vuepress/utils'\nimport { prepareClientConfigFile } from './prepareClientConfigFile.js'\n\n/**\n * Options for @vuepress/plugin-register-components\n */\nexport interface RegisterComponentsPluginOptions {\n  /**\n   * An object that defines name of components and their corresponding file path\n   */\n  components?: Record<string, string>\n\n  /**\n   * Absolute path to the components directory\n   */\n  componentsDir?: string | null\n\n  /**\n   * Patterns to match component files using [globby](https://github.com/sindresorhus/globby)\n   *\n   * The patterns are relative to componentsDir`\n   */\n  componentsPatterns?: string[]\n\n  /**\n   * A function to get component name from the filename\n   */\n  getComponentName?: (filename: string) => string\n}\n\nexport const registerComponentsPlugin = ({\n  components = {},\n  componentsDir = null,\n  componentsPatterns = ['**/*.vue'],\n  getComponentName = (filename) =>\n    path.trimExt(filename.replace(/\\/|\\\\/g, '-')),\n}: RegisterComponentsPluginOptions = {}): Plugin => {\n  const options = {\n    components,\n    componentsDir,\n    componentsPatterns,\n    getComponentName,\n  }\n\n  // use options hash as the identifier of client app enhance file\n  // to avoid conflicts when using this plugin multiple times\n  const optionsHash = hash(options)\n\n  return {\n    name: '@vuepress/plugin-register-components',\n\n    multiple: true,\n\n    clientConfigFile: (app) =>\n      prepareClientConfigFile(app, options, optionsHash),\n\n    onWatched: (app, watchers) => {\n      if (componentsDir) {\n        const componentsWatcher = watch(componentsPatterns, {\n          cwd: componentsDir,\n          ignoreInitial: true,\n        })\n        componentsWatcher.on('add', () => {\n          void prepareClientConfigFile(app, options, optionsHash)\n        })\n        componentsWatcher.on('unlink', () => {\n          void prepareClientConfigFile(app, options, optionsHash)\n        })\n        watchers.push(componentsWatcher)\n      }\n    },\n  }\n}\n"],"names":["getComponentsFromDir","componentsDir","componentsPatterns","getComponentName","componentsDirFiles","globby","filename","path","prepareClientConfigFile","app","options","identifier","componentsMap","content","name","filepath","registerComponentsPlugin","components","optionsHash","hash","watchers","componentsWatcher","watch"],"mappings":"6FAGa,MAAAA,EAAuB,MAAO,CACzC,cAAAC,EACA,mBAAAC,EACA,iBAAAC,CACF,IAEK,CACH,GAAI,CAACF,EACH,MAAO,CAAA,EAIT,MAAMG,EAAqB,MAAMC,EAAOH,EAAoB,CAC1D,IAAKD,CACP,CAAC,EAGD,OAAO,OAAO,YACZG,EAAmB,IAAKE,GAAa,CACnCH,EAAiBG,CAAQ,EACzBC,EAAK,QAAQN,EAAeK,CAAQ,CACtC,CAAC,CACH,CACF,ECtBaE,EAA0B,MACrCC,EACAC,EACAC,IACoB,CAMpB,MAAMC,EAAwC,CAC5C,GALwB,MAAMZ,EAAqBU,CAAO,EAM1D,GAAGA,EAAQ,UACb,EAGMG,EAAU;AAAA;AAAA;AAAA,+BAKZ,OAAO,QAAQD,CAAa,EAC3B,IACC,CAAC,CAACE,EAAMC,CAAQ,IAAM;AAAA,sBACR,KAAK,UACnBD,CACF,CAAC,uCAAuC,KAAK,UAAUC,CAAQ,CAAC,KAChE,EACC,KAAK;AAAA,KAAQ,CAAC;AAAA;AAAA;AAAA,EAMnB,OAAON,EAAI,UACT,oCAAoCE,CAAU,MAC9CE,CACF,CACF,ECVaG,EAA2B,CAAC,CACvC,WAAAC,EAAa,CAAA,EACb,cAAAhB,EAAgB,KAChB,mBAAAC,EAAqB,CAAC,UAAU,EAChC,iBAAAC,EAAoBG,GAClBC,EAAK,QAAQD,EAAS,QAAQ,SAAU,GAAG,CAAC,CAChD,EAAqC,KAAe,CAClD,MAAMI,EAAU,CACd,WAAAO,EACA,cAAAhB,EACA,mBAAAC,EACA,iBAAAC,CACF,EAIMe,EAAcC,EAAKT,CAAO,EAEhC,MAAO,CACL,KAAM,uCAEN,SAAU,GAEV,iBAAmBD,GACjBD,EAAwBC,EAAKC,EAASQ,CAAW,EAEnD,UAAW,CAACT,EAAKW,IAAa,CAC5B,GAAInB,EAAe,CACjB,MAAMoB,EAAoBC,EAAMpB,EAAoB,CAClD,IAAKD,EACL,cAAe,EACjB,CAAC,EACDoB,EAAkB,GAAG,MAAO,IAAM,CAC3Bb,EAAwBC,EAAKC,EAASQ,CAAW,CACxD,CAAC,EACDG,EAAkB,GAAG,SAAU,IAAM,CAC9Bb,EAAwBC,EAAKC,EAASQ,CAAW,CACxD,CAAC,EACDE,EAAS,KAAKC,CAAiB,CACjC,CACF,CACF,CACF"}